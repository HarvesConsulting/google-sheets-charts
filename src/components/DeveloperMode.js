import React, { useState, useEffect } from 'react';
import { getAvailableColumns } from '../services/googleSheetsAPI';
import './DeveloperMode.css';

const DeveloperMode = ({ 
  config, 
  data, 
  loading, 
  error, 
  onConfigUpdate, 
  onFetchData,
  onEnterUserMode 
}) => {
  const [localConfig, setLocalConfig] = useState(config);
  const [availableColumns, setAvailableColumns] = useState([]);

  useEffect(() => {
    if (data && data.length > 0) {
      const columns = getAvailableColumns(data);
      setAvailableColumns(columns);
    }
  }, [data]);

  const handleSubmit = (e) => {
    e.preventDefault();
    onConfigUpdate(localConfig);
  };

  const handleFetchData = () => {
    onConfigUpdate(localConfig);
    setTimeout(() => {
      onFetchData();
    }, 100);
  };

  const handleConfigChange = (field, value) => {
    setLocalConfig(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const isFormValid = localConfig.sheetId && localConfig.xAxis && localConfig.yAxis;

  return (
    <div className="developer-mode">
      <div className="mode-header">
        <h2>üë®‚Äçüíª –†–µ–∂–∏–º —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞</h2>
        <p>–ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets —Ç–∞ –≤–∏–±–µ—Ä—ñ—Ç—å –¥–∞–Ω—ñ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞</p>
      </div>

      <div className="developer-content">
        <div className="config-panel">
          <form onSubmit={handleSubmit} className="config-form">
            <div className="form-section">
              <h3>üîó –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets</h3>
              
              <div className="form-group">
                <label>üìé ID —Ç–∞–±–ª–∏—Ü—ñ Google Sheets *</label>
                <input
                  type="text"
                  value={localConfig.sheetId}
                  onChange={(e) => handleConfigChange('sheetId', e.target.value)}
                  placeholder="1DcLfPMBDavVdnaqRgT5XQFmWDcOCtnWrVmpSRD7EEa4"
                  className="form-input"
                />
                <small>ID –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –º—ñ–∂ /d/ —Ç–∞ /edit –≤ URL —Ç–∞–±–ª–∏—Ü—ñ</small>
              </div>
            </div>

            <div className="form-section">
              <h3>üìê –í–∏–±—ñ—Ä –¥–∞–Ω–∏—Ö –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞</h3>
              
              <div className="form-group">
                <label>üìà –í—ñ—Å—å X (–¥–∞—Ç–∞/—á–∞—Å) *</label>
                <select
                  value={localConfig.xAxis}
                  onChange={(e) => handleConfigChange('xAxis', e.target.value)}
                  className="form-input"
                >
                  <option value="">-- –û–±–µ—Ä—ñ—Ç—å –∫–æ–ª–æ–Ω–∫—É --</option>
                  {availableColumns.map(col => (
                    <option key={col} value={col}>{col}</option>
                  ))}
                </select>
                <small>–ö–æ–ª–æ–Ω–∫–∞ –∑ –¥–∞—Ç–∞–º–∏ —Ç–∞ —á–∞—Å–æ–º –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ—ó –æ—Å—ñ</small>
              </div>

              <div className="form-group">
                <label>üìâ –í—ñ—Å—å Y (–∑–Ω–∞—á–µ–Ω–Ω—è) *</label>
                <select
                  value={localConfig.yAxis}
                  onChange={(e) => handleConfigChange('yAxis', e.target.value)}
                  className="form-input"
                >
                  <option value="">-- –û–±–µ—Ä—ñ—Ç—å –∫–æ–ª–æ–Ω–∫—É --</option>
                  {availableColumns
                    .filter(col => col !== localConfig.xAxis)
                    .map(col => (
                      <option key={col} value={col}>{col}</option>
                    ))
                  }
                </select>
                <small>–ö–æ–ª–æ–Ω–∫–∞ –∑ —á–∏—Å–ª–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏ –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ—ó –æ—Å—ñ</small>
              </div>
            </div>

            <div className="action-buttons">
              <button 
                type="button" 
                onClick={handleFetchData}
                disabled={!isFormValid || loading}
                className="btn btn-primary"
              >
                {loading ? 'üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...' : 'üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ'}
              </button>
              
              {data.length > 0 && (
                <button 
                  type="button" 
                  onClick={onEnterUserMode}
                  className="btn btn-success"
                >
                  üìä –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≥—Ä–∞—Ñ—ñ–∫–∞
                </button>
              )}
            </div>
          </form>

          {error && (
            <div className="error-message">
              {error}
            </div>
          )}

          {data.length > 0 && (
            <div className="data-preview">
              <h4>üìã –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –¥–∞–Ω–∏—Ö ({data.length} —Ä—è–¥–∫—ñ–≤)</h4>
              <div className="preview-table">
                <table>
                  <thead>
                    <tr>
                      <th className="axis-x">{localConfig.xAxis}</th>
                      <th className="axis-y">{localConfig.yAxis}</th>
                    </tr>
                  </thead>
                  <tbody>
                    {data.slice(0, 5).map((row, index) => (
                      <tr key={index}>
                        <td>{row[localConfig.xAxis]}</td>
                        <td>{row[localConfig.yAxis]}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
                {data.length > 5 && (
                  <div className="preview-more">
                    ... —ñ —â–µ {data.length - 5} —Ä—è–¥–∫—ñ–≤
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default DeveloperMode;