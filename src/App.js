import React, { useState, useCallback } from 'react';
import { getSheetData } from './services/googleSheetsAPI';
import DeveloperMode from './components/DeveloperMode';
import UserMode from './components/UserMode';
import StartScreen from './components/StartScreen';
import './App.css';

function App() {
  const [currentMode, setCurrentMode] = useState('start'); // 'start', 'developer', 'user'
  const [chartData, setChartData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [config, setConfig] = useState({
    sheetId: '',
    xAxis: '–î–∞—Ç–∞–ß–∞—Å',
    yAxis: '–®–ø–∞–ª–µ—Ä–∞'
  });

  const fetchData = useCallback(async () => {
    if (!config.sheetId) {
      setError('‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å ID —Ç–∞–±–ª–∏—Ü—ñ');
      return;
    }

    setLoading(true);
    setError('');
    
    try {
      const data = await getSheetData(config.sheetId, 'AppSheetView', 'A:Z');
      setChartData(data || []);
      console.log('–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:', data?.length, '—Ä—è–¥–∫—ñ–≤');
    } catch (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', err);
      setError('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ñ.');
      setChartData([]);
    } finally {
      setLoading(false);
    }
  }, [config.sheetId]);

  const handleConfigUpdate = (newConfig) => {
    setConfig(newConfig);
  };

  const handleEnterUserMode = () => {
    if (chartData.length > 0) {
      setCurrentMode('user');
    } else {
      setError('–°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞–Ω—ñ –≤ —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞');
    }
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>üìä Google Sheets Charts</h1>
        <p>–ü—Ä–æ—Å—Ç–∏–π –ø–µ—Ä–µ–≥–ª—è–¥ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –∑ Google Tables</p>
      </header>
      
      <div className="container">
        {currentMode === 'start' && (
          <StartScreen 
            onDeveloperMode={() => setCurrentMode('developer')}
            onUserMode={() => setCurrentMode('user')}
          />
        )}

        {currentMode === 'developer' && (
          <DeveloperMode 
            config={config}
            data={chartData}
            loading={loading}
            error={error}
            onConfigUpdate={handleConfigUpdate}
            onFetchData={fetchData}
            onEnterUserMode={handleEnterUserMode}
          />
        )}

        {currentMode === 'user' && (
          <UserMode 
            data={chartData}
            config={config}
            onBackToStart={() => setCurrentMode('start')}
            onBackToDeveloper={() => setCurrentMode('developer')}
          />
        )}
      </div>
    </div>
  );
}

export default App;