import React, { useState, useCallback, useEffect, useRef } from 'react';
import { getSheetData } from './services/googleSheetsAPI';
import DeveloperMode from './components/DeveloperMode';
import UserMode from './components/UserMode';
import StartScreen from './components/StartScreen';
import './App.css';

function App() {
  const [currentMode, setCurrentMode] = useState('start');
  const [chartData, setChartData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [config, setConfig] = useState({
    sheetId: '',
    xAxis: '',
    chartTitle: '–ì—Ä–∞—Ñ—ñ–∫ –¥–∞–Ω–∏—Ö',
    xAxisLabel: '–ß–∞—Å',
    yAxisLabel: '–ó–Ω–∞—á–µ–Ω–Ω—è'
  });
  const [sensors, setSensors] = useState([]);
  const [showSidebar, setShowSidebar] = useState(false);

  const sidebarRef = useRef(null);
  const overlayRef = useRef(null);

  // iOS —Ñ—ñ–∫—Å - –±–ª–æ–∫—É—î–º–æ —Å–∫—Ä–æ–ª–ª body –∫–æ–ª–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∞ –ø–∞–Ω–µ–ª—å
  useEffect(() => {
    const handleTouchMove = (e) => {
      if (showSidebar) {
        e.preventDefault();
      }
    };

    if (showSidebar) {
      document.body.style.overflow = 'hidden';
      document.body.style.position = 'fixed';
      document.body.style.width = '100%';
      document.body.style.height = '100%';
    } else {
      document.body.style.overflow = '';
      document.body.style.position = '';
      document.body.style.width = '';
      document.body.style.height = '';
    }

    document.addEventListener('touchmove', handleTouchMove, { passive: false });
    
    return () => {
      document.removeEventListener('touchmove', handleTouchMove);
      document.body.style.overflow = '';
      document.body.style.position = '';
      document.body.style.width = '';
      document.body.style.height = '';
    };
  }, [showSidebar]);

  // –§—ñ–∫—Å –¥–ª—è iOS - –ø—Ä–∏–º—É—Å–æ–≤–æ –ø–µ—Ä–µ–º–∞–ª—é–≤–∞—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  const forceReflow = (element) => {
    return element.offsetHeight; // –î–æ–¥–∞—î–º–æ return
  };

  const handleOpenSidebar = () => {
    setShowSidebar(true);
    // –ü—Ä–∏–º—É—Å–æ–≤–∏–π reflow –¥–ª—è iOS
    setTimeout(() => {
      if (sidebarRef.current) {
        forceReflow(sidebarRef.current);
      }
    }, 50);
  };

  const handleCloseSidebar = () => {
    setShowSidebar(false);
  };

  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
  useEffect(() => {
    const savedConfig = localStorage.getItem('googleSheetsConfig');
    const savedSensors = localStorage.getItem('googleSheetsSensors');
    
    if (savedConfig) {
      const parsedConfig = JSON.parse(savedConfig);
      setConfig(parsedConfig);
      console.log('‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é');
    }
    
    if (savedSensors) {
      const parsedSensors = JSON.parse(savedSensors);
      setSensors(parsedSensors);
      console.log('‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞—Ç—á–∏–∫–∏:', parsedSensors.length);
    }
  }, []);

  const fetchData = useCallback(async (sheetId = config.sheetId) => {
    const targetSheetId = sheetId || config.sheetId;
    
    if (!targetSheetId) {
      setError('‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å ID —Ç–∞–±–ª–∏—Ü—ñ');
      return;
    }

    setLoading(true);
    setError('');
    
    try {
      const data = await getSheetData(targetSheetId, 'AppSheetView', 'A:Z');
      setChartData(data || []);
      console.log('‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:', data?.length, '—Ä—è–¥–∫—ñ–≤');
      
      if (sheetId) {
        const newConfig = { ...config, sheetId };
        setConfig(newConfig);
      }
    } catch (err) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', err);
      setError('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ –¥–æ—Å—Ç—É–ø.');
      setChartData([]);
    } finally {
      setLoading(false);
    }
  }, [config]);

  const handleConfigUpdate = (newConfig) => {
    setConfig(newConfig);
  };

  const handleSensorsUpdate = (newSensors) => {
    setSensors(newSensors);
  };

  const handleSaveConfig = () => {
    if (config.sheetId && config.xAxis && sensors.length > 0) {
      localStorage.setItem('googleSheetsConfig', JSON.stringify(config));
      localStorage.setItem('googleSheetsSensors', JSON.stringify(sensors));
      alert('‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!');
    } else {
      alert('‚ö†Ô∏è –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è —Ç–∞ –¥–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –¥–∞—Ç—á–∏–∫');
    }
  };

  const handleClearConfig = () => {
    localStorage.removeItem('googleSheetsConfig');
    localStorage.removeItem('googleSheetsSensors');
    setConfig({
      sheetId: '',
      xAxis: '',
      chartTitle: '–ì—Ä–∞—Ñ—ñ–∫ –¥–∞–Ω–∏—Ö',
      xAxisLabel: '–ß–∞—Å',
      yAxisLabel: '–ó–Ω–∞—á–µ–Ω–Ω—è'
    });
    setSensors([]);
    setChartData([]);
    alert('‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –æ—á–∏—â–µ–Ω–æ!');
  };

  const handleEnterUserMode = () => {
    if (chartData.length > 0 && config.xAxis && sensors.length > 0) {
      setCurrentMode('user');
    } else {
      setError('–°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞–Ω—ñ, –æ–±–µ—Ä—ñ—Ç—å –≤—ñ—Å—å X —Ç–∞ –¥–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –¥–∞—Ç—á–∏–∫');
    }
  };

  const handleInstagramClick = () => {
    window.open('https://www.instagram.com/harvest.consulting/', '_blank');
  };

  return (
    <div className="App">
      {/* –°–µ–Ω–¥–≤—ñ—á-–∫–Ω–æ–ø–∫–∞ */}
      <button 
        className="hamburger-btn"
        onClick={handleOpenSidebar}
        aria-label="–í—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é"
      >
        <span></span>
        <span></span>
        <span></span>
      </button>

      {/* –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å */}
      <div 
        ref={sidebarRef}
        className={`sidebar ${showSidebar ? 'sidebar-open' : ''}`}
      >
        <div className="sidebar-content">
          <div className="sidebar-header">
            <h2>–†–û–ó–£–ú–ù–ò–ô –ü–û–õ–ò–í</h2>
            <p>–≤—ñ–¥ HarvestConsulting</p>
            <button 
              className="sidebar-close"
              onClick={handleCloseSidebar}
              aria-label="–ó–∞–∫—Ä–∏—Ç–∏ –º–µ–Ω—é"
            >
              √ó
            </button>
          </div>
          
          <div className="sidebar-menu">
            <div className="menu-section">
              <h3>–†–µ–∂–∏–º–∏</h3>
              <div className="mode-buttons">
                <button 
                  className="mode-btn"
                  onClick={() => {
                    setCurrentMode('start');
                    handleCloseSidebar();
                  }}
                >
                  –ì–æ–ª–æ–≤–Ω–∞
                </button>
                <button 
                  className="mode-btn"
                  onClick={() => {
                    setCurrentMode('developer');
                    handleCloseSidebar();
                  }}
                >
                  –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
                </button>
                <button 
                  className="mode-btn"
                  onClick={() => {
                    setCurrentMode('user');
                    handleCloseSidebar();
                  }}
                >
                  –ì—Ä–∞—Ñ—ñ–∫–∏
                </button>
              </div>
            </div>

            <div className="menu-section">
              <h3>–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É</h3>
              <p className="app-description">
                –Ü–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑—É–º–Ω–æ–≥–æ –ø–æ–ª–∏–≤—É. 
                –î–æ–∑–≤–æ–ª—è—î –≤—ñ–∑—É–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –≤–∞—à–∏—Ö –¥–∞—Ç—á–∏–∫—ñ–≤ —É —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ.
              </p>
            </div>
            
            <div className="menu-section">
              <h3>–ö–æ–Ω—Ç–∞–∫—Ç–∏</h3>
              <button 
                className="instagram-btn"
                onClick={handleInstagramClick}
              >
                <span className="instagram-icon">üì∑</span>
                <span>Instagram: harvest.consulting</span>
              </button>
            </div>
          </div>
        </div>
      </div>
      
      {/* Overlay */}
      {showSidebar && (
        <div 
          ref={overlayRef}
          className="sidebar-overlay"
          onClick={handleCloseSidebar}
        />
      )}
      
      <div className="container">
        {currentMode === 'start' && (
          <StartScreen 
            onDeveloperMode={() => setCurrentMode('developer')}
            onUserMode={() => {
              const savedConfig = localStorage.getItem('googleSheetsConfig');
              const savedSensors = localStorage.getItem('googleSheetsSensors');
              
              if (savedConfig && savedSensors) {
                const parsedConfig = JSON.parse(savedConfig);
                const parsedSensors = JSON.parse(savedSensors);
                setConfig(parsedConfig);
                setSensors(parsedSensors);
                fetchData(parsedConfig.sheetId).then(() => {
                  setCurrentMode('user');
                });
              } else {
                setCurrentMode('user');
              }
            }}
            hasSavedConfig={!!localStorage.getItem('googleSheetsConfig')}
          />
        )}

        {currentMode === 'developer' && (
          <DeveloperMode 
            config={config}
            data={chartData}
            loading={loading}
            error={error}
            sensors={sensors}
            onConfigUpdate={handleConfigUpdate}
            onSensorsUpdate={handleSensorsUpdate}
            onFetchData={fetchData}
            onEnterUserMode={handleEnterUserMode}
            onSaveConfig={handleSaveConfig}
            onClearConfig={handleClearConfig}
          />
        )}

        {currentMode === 'user' && (
          <UserMode 
            data={chartData}
            config={config}
            sensors={sensors}
            onBackToStart={() => setCurrentMode('start')}
            onBackToDeveloper={() => setCurrentMode('developer')}
          />
        )}
      </div>
    </div>
  );
}

export default App;