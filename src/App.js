import React, { useState, useCallback, useEffect, useRef, lazy, Suspense } from 'react';
import { getSheetData } from './services/googleSheetsAPI';
import './App.css';

// –õ—ñ–Ω–∏–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –¥–ª—è –∫—Ä–∞—â–æ—ó —à–≤–∏–¥–∫–æ—Å—Ç—ñ
const StartScreen = lazy(() => import('./components/StartScreen'));
const DeveloperMode = lazy(() => import('./components/DeveloperMode'));
const UserMode = lazy(() => import('./components/UserMode'));

// Loading –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
const LoadingSpinner = () => (
  <div className="loading-spinner">
    <div className="spinner"></div>
    <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>
  </div>
);

function App() {
  const [currentMode, setCurrentMode] = useState('start');
  const [chartData, setChartData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [config, setConfig] = useState(() => {
    // –õ—ñ–Ω–∏–≤–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É
    const savedConfig = localStorage.getItem('googleSheetsConfig');
    return savedConfig ? JSON.parse(savedConfig) : {
      sheetId: '',
      xAxis: '',
      chartTitle: '–ì—Ä–∞—Ñ—ñ–∫ –¥–∞–Ω–∏—Ö',
      xAxisLabel: '–ß–∞—Å',
      yAxisLabel: '–ó–Ω–∞—á–µ–Ω–Ω—è'
    };
  });
  const [sensors, setSensors] = useState(() => {
    const savedSensors = localStorage.getItem('googleSheetsSensors');
    return savedSensors ? JSON.parse(savedSensors) : [];
  });
  const [showSidebar, setShowSidebar] = useState(false);

  const sidebarRef = useRef(null);
  const overlayRef = useRef(null);

  // –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π iOS —Ñ—ñ–∫—Å
  useEffect(() => {
    if (!showSidebar) return;

    const handleTouchMove = (e) => e.preventDefault();
    
    document.body.style.overflow = 'hidden';
    document.addEventListener('touchmove', handleTouchMove, { passive: false });
    
    return () => {
      document.body.style.overflow = '';
      document.removeEventListener('touchmove', handleTouchMove);
    };
  }, [showSidebar]);

  const handleOpenSidebar = () => setShowSidebar(true);
  const handleCloseSidebar = () => setShowSidebar(false);

  // –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π fetchData
  const fetchData = useCallback(async (sheetId = config.sheetId) => {
    const targetSheetId = sheetId || config.sheetId;
    
    if (!targetSheetId) {
      setError('‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å ID —Ç–∞–±–ª–∏—Ü—ñ');
      return;
    }

    setLoading(true);
    setError('');
    
    try {
      const data = await getSheetData(targetSheetId, 'AppSheetView', 'A:Z');
      
      if (data?.length > 0) {
        setChartData(data);
      } else {
        setError('‚ùå –¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω–∏—Ö');
        setChartData([]);
      }
      
      if (sheetId && sheetId !== config.sheetId) {
        setConfig(prev => ({ ...prev, sheetId }));
      }
    } catch (err) {
      setError('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ –¥–æ—Å—Ç—É–ø.');
      setChartData([]);
    } finally {
      setLoading(false);
    }
  }, [config.sheetId]);

  // –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
  const handleConfigUpdate = useCallback((newConfig) => {
    setConfig(newConfig);
  }, []);

  const handleSensorsUpdate = useCallback((newSensors) => {
    setSensors(newSensors);
  }, []);

  const handleSaveConfig = useCallback(() => {
    if (config.sheetId && config.xAxis && sensors.length > 0) {
      localStorage.setItem('googleSheetsConfig', JSON.stringify(config));
      localStorage.setItem('googleSheetsSensors', JSON.stringify(sensors));
      alert('‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!');
    } else {
      alert('‚ö†Ô∏è –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è —Ç–∞ –¥–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –¥–∞—Ç—á–∏–∫');
    }
  }, [config, sensors]);

  const handleClearConfig = useCallback(() => {
    localStorage.removeItem('googleSheetsConfig');
    localStorage.removeItem('googleSheetsSensors');
    setConfig({
      sheetId: '',
      xAxis: '',
      chartTitle: '–ì—Ä–∞—Ñ—ñ–∫ –¥–∞–Ω–∏—Ö',
      xAxisLabel: '–ß–∞—Å',
      yAxisLabel: '–ó–Ω–∞—á–µ–Ω–Ω—è'
    });
    setSensors([]);
    setChartData([]);
    alert('‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –æ—á–∏—â–µ–Ω–æ!');
  }, []);

  const handleEnterUserMode = useCallback(() => {
    if (chartData.length > 0 && config.xAxis && sensors.length > 0) {
      setCurrentMode('user');
    } else {
      setError('–°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞–Ω—ñ, –æ–±–µ—Ä—ñ—Ç—å –≤—ñ—Å—å X —Ç–∞ –¥–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –¥–∞—Ç—á–∏–∫');
    }
  }, [chartData, config.xAxis, sensors]);

  const handleInstagramClick = () => {
    window.open('https://www.instagram.com/harvest.consulting/', '_blank', 'noopener,noreferrer');
  };

  const renderCurrentMode = () => {
    switch (currentMode) {
      case 'start':
        return (
          <StartScreen 
            onDeveloperMode={() => setCurrentMode('developer')}
            onUserMode={() => {
              const savedConfig = localStorage.getItem('googleSheetsConfig');
              const savedSensors = localStorage.getItem('googleSheetsSensors');
              
              if (savedConfig && savedSensors) {
                const parsedConfig = JSON.parse(savedConfig);
                const parsedSensors = JSON.parse(savedSensors);
                setConfig(parsedConfig);
                setSensors(parsedSensors);
                fetchData(parsedConfig.sheetId).then(() => {
                  setCurrentMode('user');
                });
              } else {
                setCurrentMode('user');
              }
            }}
            hasSavedConfig={!!localStorage.getItem('googleSheetsConfig')}
          />
        );
      case 'developer':
        return (
          <DeveloperMode 
            config={config}
            data={chartData}
            loading={loading}
            error={error}
            sensors={sensors}
            onConfigUpdate={handleConfigUpdate}
            onSensorsUpdate={handleSensorsUpdate}
            onFetchData={fetchData}
            onEnterUserMode={handleEnterUserMode}
            onSaveConfig={handleSaveConfig}
            onClearConfig={handleClearConfig}
          />
        );
      case 'user':
        return (
          <UserMode 
            data={chartData}
            config={config}
            sensors={sensors}
            onBackToStart={() => setCurrentMode('start')}
            onBackToDeveloper={() => setCurrentMode('developer')}
          />
        );
      default:
        return null;
    }
  };

  return (
    <div className="App">
      {/* –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ —Å–µ–Ω–¥–≤—ñ—á-–∫–Ω–æ–ø–∫–∞ */}
      <button 
        className="hamburger-btn"
        onClick={handleOpenSidebar}
        aria-label="–í—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é"
      >
        <span></span>
        <span></span>
        <span></span>
      </button>

      {/* –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å */}
      <div 
        ref={sidebarRef}
        className={`sidebar ${showSidebar ? 'sidebar-open' : ''}`}
      >
        <div className="sidebar-content">
          <div className="sidebar-header">
            <h2>–†–û–ó–£–ú–ù–ò–ô –ü–û–õ–ò–í</h2>
            <p>–≤—ñ–¥ HarvestConsulting</p>
            <button 
              className="sidebar-close"
              onClick={handleCloseSidebar}
              aria-label="–ó–∞–∫—Ä–∏—Ç–∏ –º–µ–Ω—é"
            >
              √ó
            </button>
          </div>
          
          <div className="sidebar-menu">
            <div className="menu-section">
              <h3>–†–µ–∂–∏–º–∏</h3>
              <div className="mode-buttons">
                <button className="mode-btn" onClick={() => { setCurrentMode('start'); handleCloseSidebar(); }}>
                  üè† –ì–æ–ª–æ–≤–Ω–∞
                </button>
                <button className="mode-btn" onClick={() => { setCurrentMode('developer'); handleCloseSidebar(); }}>
                  ‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
                </button>
                <button className="mode-btn" onClick={() => { setCurrentMode('user'); handleCloseSidebar(); }}>
                  üìä –ì—Ä–∞—Ñ—ñ–∫–∏
                </button>
              </div>
            </div>

            <div className="menu-section">
              <h3>–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É</h3>
              <p className="app-description">
                –Ü–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑—É–º–Ω–æ–≥–æ –ø–æ–ª–∏–≤—É
              </p>
            </div>
            
            <div className="menu-section">
              <h3>–ö–æ–Ω—Ç–∞–∫—Ç–∏</h3>
              <button className="instagram-btn" onClick={handleInstagramClick}>
                <span className="instagram-icon">üì∑</span>
                <span>harvest.consulting</span>
              </button>
            </div>
          </div>
        </div>
      </div>
      
      {/* Overlay */}
      {showSidebar && (
        <div 
          ref={overlayRef}
          className="sidebar-overlay"
          onClick={handleCloseSidebar}
        />
      )}
      
      <div className="container">
        <Suspense fallback={<LoadingSpinner />}>
          {renderCurrentMode()}
        </Suspense>
      </div>
    </div>
  );
}

export default React.memo(App);